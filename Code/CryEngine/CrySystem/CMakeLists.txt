if(EXISTS ${SDK_DIR}/Scaleform)
	set(HAS_SCALEFORM TRUE)	
	add_subdirectory(Scaleform)
endif()

#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

<<<<<<< HEAD
set (SourceGroup_CodeCoverage
	CodeCoverage/CodeCheckpointMgr.cpp
	CodeCoverage/CodeCheckpointMgr.h
)
source_group("CodeCoverage" FILES ${SourceGroup_CodeCoverage})


set (SourceGroup_ExtensionSystem
	ExtensionSystem/CryFactoryRegistryImpl.cpp
	ExtensionSystem/CryFactoryRegistryImpl.h
)
source_group("ExtensionSystem" FILES ${SourceGroup_ExtensionSystem})


set (SourceGroup_ExtensionSystem_TestCases
	ExtensionSystem/TestCases/TestExtensions.cpp
	ExtensionSystem/TestCases/TestExtensions.h
)
source_group("ExtensionSystem\\TestCases" FILES ${SourceGroup_ExtensionSystem_TestCases})


set (SourceGroup_HTTPDownloader
	DownloadManager.cpp
	DownloadManager.h
	HTTPDownloader.cpp
	HTTPDownloader.h
)
source_group("HTTPDownloader" FILES ${SourceGroup_HTTPDownloader})


set (SourceGroup_HeaderFiles
	BootProfiler.h
	BudgetingSystem.h
	CPUDetect.h
	CmdLine.h
	CmdLineArg.h
	ConsoleBatchFile.h
	ConsoleHelpGen.h
	CryPak.h
	CryPakHandleCache.h
	CrySizerImpl.h
	CrySizerStats.h
	CryWaterMark.h
	DebugCallStack.h
	DurangoDebugCallstack.h
	GeneralMemoryHeap.h
	HardwareMouse.h
	HotUpdate.h
	IDebugCallStack.h
	Log.h
	MemoryFragmentationProfiler.h
	NotificationNetwork.h
	PakVars.h
	PlatformOS/PatternMatcher.h
	Serialization/ArchiveHost.h
	SimpleStringPool.h
	Statistics/LocalMemoryUsage.h
	System.h
	SystemCFG.h
	SystemEventDispatcher.h
	SystemInit.h
	Timer.h
	Validator.h
	XConsole.h
	XConsoleVariable.h
	XML/ReadWriteXMLSink.h
	resource.h
)
source_group("Header Files" FILES ${SourceGroup_HeaderFiles})


set (SourceGroup_HuffmanEncoding
	Huffman.cpp
	Huffman.h
)
source_group("HuffmanEncoding" FILES ${SourceGroup_HuffmanEncoding})


set (SourceGroup_JobManager
	JobManager/JobManager.cpp
	JobManager/JobManager.h
	JobManager/JobStructs.h
)
source_group("JobManager" FILES ${SourceGroup_JobManager})


set (SourceGroup_JobManager_BlockingBackend
	JobManager/BlockingBackend/BlockingBackEnd.cpp
	JobManager/BlockingBackend/BlockingBackEnd.h
)
source_group("JobManager\\BlockingBackend" FILES ${SourceGroup_JobManager_BlockingBackend})


set (SourceGroup_JobManager_FallbackBackend
	JobManager/FallbackBackend/FallBackBackend.h
	JobManager/FallbackBackend/FallbackBackend.cpp
)
source_group("JobManager\\FallbackBackend" FILES ${SourceGroup_JobManager_FallbackBackend})


set (SourceGroup_JobManager_ThreadBackEnd
	JobManager/PCBackEnd/ThreadBackEnd.cpp
	JobManager/PCBackEnd/ThreadBackEnd.h
)
source_group("JobManager\\ThreadBackEnd" FILES ${SourceGroup_JobManager_ThreadBackEnd})


set (SourceGroup_LZ4Decompressor
	LZ4Decompressor.cpp
	LZ4Decompressor.h
)
source_group("LZ4Decompressor" FILES ${SourceGroup_LZ4Decompressor})


set (SourceGroup_Localization
	LocalizedStringManager.cpp
	LocalizedStringManager.h
)
source_group("Localization" FILES ${SourceGroup_Localization})


set (SourceGroup_Mac
	SystemUtilsApple.h
	SystemUtilsApple.mm
)
source_group("Mac" FILES ${SourceGroup_Mac})


set (SourceGroup_MemoryManager
	CryMemoryManager.cpp
	CryMemoryManager_sce.h
	CryMemoryManager_sce.h
	CustomMemoryHeap.cpp
	CustomMemoryHeap.h
	DefragAllocator.cpp
	DefragAllocator.h
	MTSafeAllocator.cpp
	MTSafeAllocator.h
	MemReplay.h
	MemoryAddressRange.cpp
	MemoryAddressRange.h
	MemoryManager.cpp
	MemoryManager.h
	PageMappingHeap.cpp
	PageMappingHeap.h
)
source_group("MemoryManager" FILES ${SourceGroup_MemoryManager})


set (SourceGroup_MiniGUI
	MiniGUI/DrawContext.cpp
	MiniGUI/DrawContext.h
	MiniGUI/MiniButton.cpp
	MiniGUI/MiniButton.h
	MiniGUI/MiniGUI.cpp
	MiniGUI/MiniGUI.h
	MiniGUI/MiniInfoBox.cpp
	MiniGUI/MiniInfoBox.h
	MiniGUI/MiniMenu.cpp
	MiniGUI/MiniMenu.h
	MiniGUI/MiniTable.cpp
	MiniGUI/MiniTable.h
)
source_group("MiniGUI" FILES ${SourceGroup_MiniGUI})


set (SourceGroup_NullImplementation
	NullImplementation/NULLAudioSystems.h
	NullImplementation/NULLRenderAuxGeom.cpp
	NullImplementation/NULLRenderAuxGeom.h
	NullImplementation/NullInput.h
	NullImplementation/NullLiveCreate.h
	NullImplementation/NullResponseSystem.h
)
source_group("NullImplementation" FILES ${SourceGroup_NullImplementation})


set (SourceGroup_OverloadSceneManager
	OverloadSceneManager/OverloadSceneManager.cpp
	OverloadSceneManager/OverloadSceneManager.h
)
source_group("OverloadSceneManager" FILES ${SourceGroup_OverloadSceneManager})


set (SourceGroup_PlatformOS
	PlatformOS/PlatformOS_Durango.cpp
	PlatformOS/PlatformOS_Durango.h
	PlatformOS/PlatformOS_Orbis.cpp
	PlatformOS/PlatformOS_Orbis.h
	PlatformOS/PlatformOS_PC.cpp
	PlatformOS/PlatformOS_PC.h
	PlatformOS/SaveReaderWriter_CryPak.cpp
	PlatformOS/SaveReaderWriter_CryPak.h
	PlatformOS/SaveReaderWriter_Durango.cpp
	PlatformOS/SaveReaderWriter_Durango.h
	PlatformOS/SaveReaderWriter_Memory.cpp
	PlatformOS/SaveReaderWriter_Memory.h
	PlatformOS/SaveReaderWriter_Steam.cpp
	PlatformOS/SaveReaderWriter_Steam.h
	PlatformOS/StreamingInstall_Durango.cpp
	PlatformOS/StreamingInstall_Durango.h
)
source_group("PlatformOS" FILES ${SourceGroup_PlatformOS})


set (SourceGroup_Profiler
	DiskProfiler.cpp
	DiskProfiler.h
	FrameProfileRender.cpp
	FrameProfileSystem.cpp
	FrameProfileSystem.h
	LoadingProfiler.cpp
	LoadingProfiler.h
	PerfHUD.cpp
	PerfHUD.h
	ProfileLogSystem.cpp
	ProfileLogSystem.h
	Sampler.cpp
	Sampler.h
)
source_group("Profiler" FILES ${SourceGroup_Profiler})


set (SourceGroup_RemoteConsole
	RemoteConsole/RemoteConsole.cpp
	RemoteConsole/RemoteConsole.h
)
source_group("RemoteConsole" FILES ${SourceGroup_RemoteConsole})


set (SourceGroup_ResourceFiles
	crash_face.bmp
)
source_group("Resource Files" FILES ${SourceGroup_ResourceFiles})


set (SourceGroup_Root
	CrashHandler.rc
	StdAfx.cpp
	StdAfx.h
)


set (SourceGroup_Scaleform
	Scaleform/ConfigScaleform.cpp
	Scaleform/ConfigScaleform.h
	Scaleform/FlashPlayerInstance.cpp
	Scaleform/FlashPlayerInstance.h
	Scaleform/GAllocatorCryMem.cpp
	Scaleform/GAllocatorCryMem.h
	Scaleform/GFileCryPak.cpp
	Scaleform/GFileCryPak.h
	Scaleform/GFxVideoSoundCrySound.cpp
	Scaleform/GFxVideoSoundCrySound.h
	Scaleform/GFxVideoWrapper.cpp
	Scaleform/GFxVideoWrapper.h
	Scaleform/GImageInfoXRender.cpp
	Scaleform/GImageInfoXRender.h
	Scaleform/GImeHelper.cpp
	Scaleform/GImeHelper.h
	Scaleform/GMemorySTLAlloc.h
	Scaleform/GRendererXRender.cpp
	Scaleform/GRendererXRender.h
	Scaleform/GTextureXRender.cpp
	Scaleform/GTextureXRender.h
	Scaleform/SharedResources.cpp
	Scaleform/SharedResources.h
	Scaleform/SharedStates.cpp
	Scaleform/SharedStates.h
)
source_group("Scaleform" FILES ${SourceGroup_Scaleform})


set (SourceGroup_Serialization
	Serialization/ArchiveHost.cpp
	Serialization/Test_ArchiveHost.cpp
	Serialization/Token.h
	Serialization/XmlIArchive.cpp
	Serialization/XmlIArchive.h
	Serialization/XmlOArchive.cpp
	Serialization/XmlOArchive.h
)
source_group("Serialization" FILES ${SourceGroup_Serialization})


set (SourceGroup_Services
	RemoteCommand.cpp
	RemoteCommand.h
	RemoteCommandClient.cpp
	RemoteCommandHelpers.cpp
	RemoteCommandHelpers.h
	RemoteCommandServer.cpp
	ServiceNetwork.cpp
	ServiceNetwork.h
)
source_group("Services" FILES ${SourceGroup_Services})


set (SourceGroup_SourceFiles
	AVI_Reader.cpp
	AVI_Reader.h
	AsyncPakManager.cpp
	AsyncPakManager.h
	AutoDetectCPUTestSuit.cpp
	AutoDetectCPUTestSuit.h
	AutoDetectSpec.cpp
	AutoDetectSpec.h
	BootProfiler.cpp
	BudgetingSystem.cpp
	CPUDetect.cpp
	ClientHandler.cpp
	ClientHandler.h
	CmdLine.cpp
	CmdLineArg.cpp
	CompressedFile.cpp
	ConsoleBatchFile.cpp
	ConsoleHelpGen.cpp
	CryArchive.cpp
	CryArchive.h
	CryAsyncMemcpy.cpp
	CryDLMalloc.c
	CryPak.cpp
	CrySizerImpl.cpp
	CrySizerStats.cpp
	DebugCallStack.cpp
	DllMain.cpp
	DurangoDebugCallstack.cpp
	DxDiag.h
	FileIOWrapper.cpp
	FileIOWrapper.h
	GeneralMemoryHeap.cpp
	HandlerBase.cpp
	HandlerBase.h
	HardwareMouse.cpp
	IDebugCallStack.cpp
	ImeManager.cpp
	ImeManager.h
	JiraClient.cpp
	JiraClient.h
	LevelHeap.cpp
	Log.cpp
	MemReplay.cpp
	MemReplay_Orbis.cpp
	NotificationNetwork.cpp
	OrbisDebugCallStack.cpp
	PhysRenderer.cpp
	PhysRenderer.h
	ResourceManager.cpp
	ResourceManager.h
	ServerHandler.cpp
	ServerHandler.h
	ServerThrottle.cpp
	ServerThrottle.h
	SyncLock.cpp
	SyncLock.h
	System.cpp
	SystemCFG.cpp
	SystemEventDispatcher.cpp
	SystemInit.cpp
	SystemRender.cpp
	SystemScheduler.cpp
	SystemScheduler.h
	SystemWin32.cpp
	Timer.cpp
	UnixConsole.cpp
	UnixConsole.h
	WindowsConsole.cpp
	WindowsConsole.h
	XConsole.cpp
	XConsoleVariable.cpp
)
source_group("Source Files" FILES ${SourceGroup_SourceFiles})


set (SourceGroup_Statistics
	Statistics/LocalMemoryUsage.cpp
)
source_group("Statistics" FILES ${SourceGroup_Statistics})


set (SourceGroup_Statoscope
	Statoscope.cpp
	Statoscope.h
	StatoscopeStreamingIntervalGroup.cpp
	StatoscopeStreamingIntervalGroup.h
	StatoscopeTextureStreamingIntervalGroup.cpp
	StatoscopeTextureStreamingIntervalGroup.h
)
source_group("Statoscope" FILES ${SourceGroup_Statoscope})


set (SourceGroup_StreamEngine
	StreamEngine/StreamAsyncFileRequest.cpp
	StreamEngine/StreamAsyncFileRequest.h
	StreamEngine/StreamAsyncFileRequest_Jobs.cpp
	StreamEngine/StreamEngine.cpp
	StreamEngine/StreamEngine.h
	StreamEngine/StreamIOThread.cpp
	StreamEngine/StreamIOThread.h
	StreamEngine/StreamReadStream.cpp
	StreamEngine/StreamReadStream.h
)
source_group("StreamEngine" FILES ${SourceGroup_StreamEngine})


set (SourceGroup_Stroboscope
	Stroboscope/Stroboscope.cpp
	Stroboscope/Stroboscope.h
)
source_group("Stroboscope" FILES ${SourceGroup_Stroboscope})


set (SourceGroup_TestSystem
	ExcelExport.cpp
	ExcelExport.h
	Statistics.cpp
	Statistics.h
	TestSystemLegacy.cpp
	TestSystemLegacy.h
	UnitTestExcelReporter.cpp
	UnitTestExcelReporter.h
	UnitTestSystem.cpp
	UnitTestSystem.h
	VisRegTest.cpp
	VisRegTest.h
)
source_group("TestSystem" FILES ${SourceGroup_TestSystem})


set (SourceGroup_Threading
	CryThreadUtil_posix.h
	CryThreadUtil_sce.h
	CryThreadUtil_win32.h
	SystemThreading.cpp
	ThreadConfigManager.cpp
	ThreadConfigManager.h
	ThreadInfo.cpp
	ThreadInfo.h
	ThreadProfiler.cpp
	ThreadProfiler.h
	ThreadSampler.cpp
	ThreadSampler.h
)
source_group("Threading" FILES ${SourceGroup_Threading})


set (SourceGroup_VR
	HMDCVars.cpp
	HMDCVars.h
	HMDManager.cpp
	HMDManager.h
)
source_group("VR" FILES ${SourceGroup_VR})


set (SourceGroup_VR_Oculus
	Oculus/OculusConfig.h
	Oculus/OculusDevice.cpp
	Oculus/OculusDevice.h
	Oculus/OculusResources.cpp
	Oculus/OculusResources.h
	Oculus/OculusTouchController.cpp
	Oculus/OculusTouchController.h
)
source_group("VR\\Oculus" FILES ${SourceGroup_VR_Oculus})


set (SourceGroup_VR_OpenVR
	OpenVR/OpenVRConfig.h
	OpenVR/OpenVRController.cpp
	OpenVR/OpenVRController.h
	OpenVR/OpenVRDevice.cpp
	OpenVR/OpenVRDevice.h
	OpenVR/OpenVRResources.cpp
	OpenVR/OpenVRResources.h
)
source_group("VR\\OpenVR" FILES ${SourceGroup_VR_OpenVR})


set (SourceGroup_VR_Osvr
	Osvr/OsvrDevice.cpp
	Osvr/OsvrDevice.h
	Osvr/OsvrResources.cpp
	Osvr/OsvrResources.h
)
source_group("VR\\Osvr" FILES ${SourceGroup_VR_Osvr})


set (SourceGroup_Windows
	WindowsErrorReporting.cpp
)
source_group("Windows" FILES ${SourceGroup_Windows})


set (SourceGroup_XML
	XML/SerializeXMLReader.cpp
	XML/SerializeXMLReader.h
	XML/SerializeXMLWriter.cpp
	XML/SerializeXMLWriter.h
	XML/XMLBinaryNode.cpp
	XML/XMLBinaryNode.h
	XML/XMLBinaryReader.cpp
	XML/XMLBinaryReader.h
	XML/XMLBinaryWriter.cpp
	XML/XMLBinaryWriter.h
	XML/XMLPatcher.cpp
	XML/XMLPatcher.h
	XML/XmlUtils.cpp
	XML/XmlUtils.h
	XML/xml.cpp
	XML/xml.h
	XML/xml_string.h
)
source_group("XML" FILES ${SourceGroup_XML})


set (SourceGroup_XML_XMLSink
	XML/ReadXMLSink.cpp
	XML/WriteXMLSource.cpp
)
source_group("XML\\XMLSink" FILES ${SourceGroup_XML_XMLSink})


set (SourceGroup_ZLibCompressor
	ZLibCompressor.cpp
	ZLibCompressor.h
)
source_group("ZLibCompressor" FILES ${SourceGroup_ZLibCompressor})


set (SourceGroup_ZLibDecompressor
	ZLibDecompressor.cpp
	ZLibDecompressor.h
)
source_group("ZLibDecompressor" FILES ${SourceGroup_ZLibDecompressor})


set (SourceGroup_ZipDir
	ZipDir.h
	ZipDirCache.cpp
	ZipDirCache.h
	ZipDirCacheFactory.cpp
	ZipDirCacheFactory.h
	ZipDirCacheRW.cpp
	ZipDirCacheRW.h
	ZipDirFind.cpp
	ZipDirFind.h
	ZipDirFindRW.cpp
	ZipDirFindRW.h
	ZipDirList.cpp
	ZipDirList.h
	ZipDirStructures.cpp
	ZipDirStructures.h
	ZipDirTree.cpp
	ZipDirTree.h
	ZipEncrypt.cpp
	ZipEncrypt.h
	ZipFile.h
	ZipFileFormat.h
	ZipFileFormat_info.h
)
source_group("ZipDir" FILES ${SourceGroup_ZipDir})


# Support unity build with uber files
set(CrySystem_uber_0_cpp ${SourceGroup_HeaderFiles}  )
enable_unity_build( "CrySystem_uber_0.cpp" CrySystem_uber_0_cpp )

set(CrySystem_uber_1_cpp  )
enable_unity_build( "CrySystem_uber_1.cpp" CrySystem_uber_1_cpp )

set(CrySystem_uber_2_cpp ${SourceGroup_MemoryManager} ${SourceGroup_ResourceFiles} ${SourceGroup_StreamEngine}  )
enable_unity_build( "CrySystem_uber_2.cpp" CrySystem_uber_2_cpp )

set(CrySystem_uber_3_cpp ${SourceGroup_XML} ${SourceGroup_XML_XMLSink} ${SourceGroup_ZipDir}  )
enable_unity_build( "CrySystem_uber_3.cpp" CrySystem_uber_3_cpp )

set(CrySystem_uber_4_cpp ${SourceGroup_HTTPDownloader} ${SourceGroup_Localization} ${SourceGroup_Profiler} ${SourceGroup_Windows}  )
enable_unity_build( "CrySystem_uber_4.cpp" CrySystem_uber_4_cpp )

set(CrySystem_uber_5_cpp ${SourceGroup_Scaleform} ${SourceGroup_TestSystem}  )
enable_unity_build( "CrySystem_uber_5.cpp" CrySystem_uber_5_cpp )

set(CrySystem_uber_6_cpp ${SourceGroup_ExtensionSystem} ${SourceGroup_ExtensionSystem_TestCases} ${SourceGroup_MiniGUI} ${SourceGroup_NullImplementation} ${SourceGroup_Threading}  )
enable_unity_build( "CrySystem_uber_6.cpp" CrySystem_uber_6_cpp )

set(CrySystem_uber_7_cpp ${SourceGroup_CodeCoverage} ${SourceGroup_Statistics} ${SourceGroup_Statoscope} ${SourceGroup_ZLibCompressor}  )
enable_unity_build( "CrySystem_uber_7.cpp" CrySystem_uber_7_cpp )

set(CrySystem_uber_8_cpp ${SourceGroup_HuffmanEncoding} ${SourceGroup_JobManager} ${SourceGroup_JobManager_BlockingBackend} ${SourceGroup_JobManager_FallbackBackend} ${SourceGroup_JobManager_ThreadBackEnd} ${SourceGroup_OverloadSceneManager}  )
enable_unity_build( "CrySystem_uber_8.cpp" CrySystem_uber_8_cpp )

set(CrySystem_uber_9_cpp ${SourceGroup_LZ4Decompressor} ${SourceGroup_RemoteConsole} ${SourceGroup_Serialization} ${SourceGroup_Services} ${SourceGroup_Stroboscope} ${SourceGroup_VR} ${SourceGroup_VR_Oculus} ${SourceGroup_VR_OpenVR} ${SourceGroup_VR_Osvr} ${SourceGroup_ZLibDecompressor}  )
enable_unity_build( "CrySystem_uber_9.cpp" CrySystem_uber_9_cpp )

set(NoUberFile ${SourceGroup_Mac} ${SourceGroup_PlatformOS} ${SourceGroup_Root} ${SourceGroup_SourceFiles}  )


set (SOURCES
	${CrySystem_uber_0_cpp}
	${CrySystem_uber_1_cpp}
	${CrySystem_uber_2_cpp}
	${CrySystem_uber_3_cpp}
	${CrySystem_uber_4_cpp}
	${CrySystem_uber_5_cpp}
	${CrySystem_uber_6_cpp}
	${CrySystem_uber_7_cpp}
	${CrySystem_uber_8_cpp}
	${CrySystem_uber_9_cpp}
	${NoUberFile}
)
=======
start_sources()
# -- Scaleform/scaleform.waf_files --
sources_platform(ALL AND HAS_SCALEFORM)
add_sources("NoUberFile"
	PROJECTS CrySystem
	SOURCE_GROUP "Scaleform"
		"Scaleform/ScaleformHelper.cpp"
		"Scaleform/ScaleformHelper.h"
		"Scaleform/ScaleformRecording.h"
		"Scaleform/ScaleformRecording.cpp"
)

add_sources("Scaleform_uber.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Scaleform"
		"Scaleform/FlashPlayerInstance.cpp"
		"Scaleform/GAllocatorCryMem.cpp"
		"Scaleform/GFileCryPak.cpp"
		"Scaleform/GFxVideoSoundCrySound.cpp"
		"Scaleform/GFxVideoWrapper.cpp"
		"Scaleform/SharedResources.cpp"
		"Scaleform/SharedStates.cpp"
		"Scaleform/FlashPlayerInstance.h"
		"Scaleform/GAllocatorCryMem.h"
		"Scaleform/GFileCryPak.h"
		"Scaleform/GFxVideoSoundCrySound.h"
		"Scaleform/GFxVideoWrapper.h"
		"Scaleform/SharedResources.h"
		"Scaleform/SharedStates.h"
		"Scaleform/GImeHelper.h"
		"Scaleform/GImeHelper.cpp"
		"Scaleform/GTexture_Impl.h"
		"Scaleform/GTexture_Impl.cpp"
		"Scaleform/GImageInfo_Impl.h"
		"Scaleform/GImageInfo_Impl.cpp"
)

# -- crysystem_sce.waf_files --
sources_platform(ORBIS)
add_sources("CrySystem_uber_2.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "MemoryManager"
		"CryMemoryManager_sce.h"
)

add_sources("CrySystem_uber_6.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Threading"
		"CryThreadUtil_sce.h"
)

# -- crysystem_win32.waf_files --
sources_platform(DURANGO WIN32)
add_sources("CrySystem_uber_6.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Threading"
		"CryThreadUtil_win32.h"
)

# -- crysystem_orbis.waf_files --
sources_platform(ORBIS)
add_sources("CrySystem_uber_0.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Source Files"
		"MemReplay_Orbis.cpp"
)

add_sources("CrySystem_uber_1.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Source Files"
		"OrbisDebugCallStack.cpp"
)

add_sources("CrySystem_uber_7.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "PlatformOS"
		"PlatformOS/PlatformOS_Orbis.cpp"
		"PlatformOS/PlatformOS_Orbis.h"
)

# -- crysystem_posix.waf_files --
sources_platform(ANDROID APPLE LINUX ORBIS WIN32)
add_sources("CrySystem_uber_6.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Threading"
		"CryThreadUtil_posix.h"
)

# -- crysystem.waf_files --
sources_platform(ALL)
add_sources("CrySystem_uber_0.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Header Files"
		"SystemInit.h"
		"Statistics/LocalMemoryUsage.h"
		"MemoryFragmentationProfiler.h"
		"XML/ReadWriteXMLSink.h"
		"Serialization/ArchiveHost.h"
		"PlatformOS/PatternMatcher.h"
		"BudgetingSystem.h"
		"CmdLine.h"
		"CmdLineArg.h"
		"ConsoleBatchFile.h"
		"ConsoleHelpGen.h"
		"CPUDetect.h"
		"CryPak.h"
		"CryPakHandleCache.h"
		"CrySizerImpl.h"
		"CrySizerStats.h"
		"CryWaterMark.h"
		"DebugCallStack.h"
		"GeneralMemoryHeap.h"
		"HardwareMouse.h"
		"HotUpdate.h"
		"IDebugCallStack.h"
		"Log.h"
		"NotificationNetwork.h"
		"PakVars.h"
		"resource.h"
		"SimpleStringPool.h"
		"System.h"
		"SystemCFG.h"
		"SystemEventDispatcher.h"
		"Timer.h"
		"Validator.h"
		"XConsole.h"
		"XConsoleVariable.h"
		"BootProfiler.h"
	SOURCE_GROUP "Source Files"
		"AutoDetectCPUTestSuit.cpp"
		"AutoDetectSpec.cpp"
		"AVI_Reader.cpp"
		"BudgetingSystem.cpp"
		"ClientHandler.cpp"
		"CmdLine.cpp"
		"CmdLineArg.cpp"
		"CompressedFile.cpp"
		"ConsoleBatchFile.cpp"
		"ConsoleHelpGen.cpp"
		"CPUDetect.cpp"
		"CryArchive.cpp"
		"CryAsyncMemcpy.cpp"
		"CryPak.cpp"
		"CrySizerImpl.cpp"
		"CrySizerStats.cpp"
		"DebugCallStack.cpp"
		"DllMain.cpp"
		"FileIOWrapper.cpp"
		"GeneralMemoryHeap.cpp"
		"HandlerBase.cpp"
		"HardwareMouse.cpp"
		"IDebugCallStack.cpp"
		"JiraClient.cpp"
		"AsyncPakManager.cpp"
		"Log.cpp"
		"MemReplay.cpp"
		"BootProfiler.cpp"
)

add_sources("CrySystem_uber_1.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Source Files"
		"SystemRender.cpp"
		"NotificationNetwork.cpp"
		"PhysRenderer.cpp"
		"ResourceManager.cpp"
		"ServerHandler.cpp"
		"ServerThrottle.cpp"
		"SyncLock.cpp"
		"System.cpp"
		"SystemCFG.cpp"
		"SystemEventDispatcher.cpp"
		"SystemInit.cpp"
		"SystemScheduler.cpp"
		"SystemWin32.cpp"
		"Timer.cpp"
		"UnixConsole.cpp"
		"WindowsConsole.cpp"
		"XConsole.cpp"
		"XConsoleVariable.cpp"
		"AutoDetectCPUTestSuit.h"
		"AutoDetectSpec.h"
		"AVI_Reader.h"
		"ClientHandler.h"
		"CryArchive.h"
		"DxDiag.h"
		"FileIOWrapper.h"
		"HandlerBase.h"
		"JiraClient.h"
		"AsyncPakManager.h"
		"PhysRenderer.h"
		"ResourceManager.h"
		"ServerHandler.h"
		"ServerThrottle.h"
		"SyncLock.h"
		"SystemScheduler.h"
		"UnixConsole.h"
		"WindowsConsole.h"
)

add_sources("CrySystem_uber_2.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "MemoryManager"
		"DefragAllocator.cpp"
		"MemoryAddressRange.cpp"
		"PageMappingHeap.cpp"
		"CryMemoryManager.cpp"
		"CustomMemoryHeap.h"
		"CustomMemoryHeap.cpp"
		"MemoryManager.cpp"
		"MTSafeAllocator.cpp"
		"DefragAllocator.h"
		"MemoryAddressRange.h"
		"PageMappingHeap.h"
		"MemoryManager.h"
		"MemReplay.h"
		"MTSafeAllocator.h"
	SOURCE_GROUP "Resource Files"
		"crash_face.bmp"
	SOURCE_GROUP "StreamEngine"
		"StreamEngine/StreamAsyncFileRequest.cpp"
		"StreamEngine/StreamAsyncFileRequest_Jobs.cpp"
		"StreamEngine/StreamEngine.cpp"
		"StreamEngine/StreamIOThread.cpp"
		"StreamEngine/StreamReadStream.cpp"
		"StreamEngine/StreamAsyncFileRequest.h"
		"StreamEngine/StreamEngine.h"
		"StreamEngine/StreamIOThread.h"
		"StreamEngine/StreamReadStream.h"
)

add_sources("CrySystem_uber_3.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "XML"
		"XML/SerializeXMLReader.cpp"
		"XML/SerializeXMLWriter.cpp"
		"XML/xml.cpp"
		"XML/XMLBinaryNode.cpp"
		"XML/XMLBinaryReader.cpp"
		"XML/XMLBinaryWriter.cpp"
		"XML/XMLPatcher.cpp"
		"XML/XmlUtils.cpp"
		"XML/SerializeXMLReader.h"
		"XML/SerializeXMLWriter.h"
		"XML/xml.h"
		"XML/XMLPatcher.h"
		"XML/xml_string.h"
		"XML/XMLBinaryNode.h"
		"XML/XMLBinaryReader.h"
		"XML/XMLBinaryWriter.h"
		"XML/XmlUtils.h"
	SOURCE_GROUP "XML\\\\XMLSink"
		"XML/ReadXMLSink.cpp"
		"XML/WriteXMLSource.cpp"
	SOURCE_GROUP "ZipDir"
		"ZipEncrypt.cpp"
		"ZipDirCache.cpp"
		"ZipDirCacheFactory.cpp"
		"ZipDirCacheRW.cpp"
		"ZipDirFind.cpp"
		"ZipDirFindRW.cpp"
		"ZipDirList.cpp"
		"ZipDirStructures.cpp"
		"ZipDirTree.cpp"
		"ZipEncrypt.h"
		"ZipDir.h"
		"ZipDirCache.h"
		"ZipDirCacheFactory.h"
		"ZipDirCacheRW.h"
		"ZipDirFind.h"
		"ZipDirFindRW.h"
		"ZipDirList.h"
		"ZipDirStructures.h"
		"ZipDirTree.h"
		"ZipFileFormat.h"
		"ZipFileFormat_info.h"
)

add_sources("CrySystem_uber_4.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "HTTPDownloader"
		"DownloadManager.cpp"
		"HTTPDownloader.cpp"
		"DownloadManager.h"
		"HTTPDownloader.h"
	SOURCE_GROUP "Localization"
		"LocalizedStringManager.cpp"
		"LocalizedStringManager.h"
	SOURCE_GROUP "Profiler"
		"DiskProfiler.cpp"
		"FrameProfileRender.cpp"
		"FrameProfileSystem.cpp"
		"LoadingProfiler.cpp"
		"PerfHUD.cpp"
		"ProfileLogSystem.cpp"
		"Sampler.cpp"
		"DiskProfiler.h"
		"FrameProfileSystem.h"
		"LoadingProfiler.h"
		"PerfHUD.h"
		"ProfileLogSystem.h"
		"Sampler.h"
	SOURCE_GROUP "Windows"
		"WindowsErrorReporting.cpp"
)

add_sources("CrySystem_uber_5.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Source Files"
		"ImeManager.h"
		"ImeManager.cpp"
	SOURCE_GROUP "TestSystem"
		"ExcelExport.cpp"
		"Statistics.cpp"
		"TestSystemLegacy.cpp"
		"UnitTestExcelReporter.cpp"
		"UnitTestSystem.cpp"
		"VisRegTest.cpp"
		"ExcelExport.h"
		"Statistics.h"
		"TestSystemLegacy.h"
		"UnitTestExcelReporter.h"
		"UnitTestSystem.h"
		"VisRegTest.h"
	SOURCE_GROUP "UserAnalytics"
		"UserAnalytics/UserAnalyticsSystem.cpp"
		"UserAnalytics/UserAnalyticsSystem.h"
	SOURCE_GROUP "Interprocess"
		"Interprocess/StatsAgent.cpp"
		"Interprocess/StatsAgent.h"
		"Interprocess/StatsAgentPipe.cpp"
		"Interprocess/StatsAgentPipe.h"
)

add_sources("CrySystem_uber_6.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "ExtensionSystem"
		"ExtensionSystem/CryPluginManager.cpp"
		"ExtensionSystem/CryPluginManager.h"
		"ExtensionSystem/CryFactoryRegistryImpl.cpp"
		"ExtensionSystem/CryFactoryRegistryImpl.h"
	SOURCE_GROUP "ExtensionSystem\\\\TestCases"
		"ExtensionSystem/TestCases/TestExtensions.cpp"
		"ExtensionSystem/TestCases/TestExtensions.h"
	SOURCE_GROUP "MiniGUI"
		"MiniGUI/DrawContext.cpp"
		"MiniGUI/MiniButton.cpp"
		"MiniGUI/MiniGUI.cpp"
		"MiniGUI/MiniInfoBox.cpp"
		"MiniGUI/MiniMenu.cpp"
		"MiniGUI/MiniTable.cpp"
		"MiniGUI/DrawContext.h"
		"MiniGUI/MiniButton.h"
		"MiniGUI/MiniGUI.h"
		"MiniGUI/MiniInfoBox.h"
		"MiniGUI/MiniMenu.h"
		"MiniGUI/MiniTable.h"
	SOURCE_GROUP "NullImplementation"
		"NullImplementation/NULLAudioSystems.h"
		"NullImplementation/NullLiveCreate.h"
		"NullImplementation/NullInput.h"
		"NullImplementation/NullResponseSystem.h"
		"NullImplementation/NULLRenderAuxGeom.h"
		"NullImplementation/NULLRenderAuxGeom.cpp"
	SOURCE_GROUP "Threading"
		"ThreadInfo.cpp"
		"ThreadProfiler.cpp"
		"ThreadSampler.cpp"
		"ThreadInfo.h"
		"ThreadSampler.h"
		"ThreadProfiler.h"
		"ThreadConfigManager.h"
		"ThreadConfigManager.cpp"
		"SystemThreading.cpp"
)

add_sources("CrySystem_uber_7.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "CodeCoverage"
		"CodeCoverage/CodeCheckpointMgr.cpp"
		"CodeCoverage/CodeCheckpointMgr.h"
	SOURCE_GROUP "PlatformOS"
		"PlatformOS/SaveReaderWriter_CryPak.cpp"
		"PlatformOS/SaveReaderWriter_Memory.cpp"
		"PlatformOS/SaveReaderWriter_CryPak.h"
		"PlatformOS/SaveReaderWriter_Memory.h"
	SOURCE_GROUP "Statistics"
		"Statistics/LocalMemoryUsage.cpp"
	SOURCE_GROUP "Statoscope"
		"Statoscope.cpp"
		"StatoscopeStreamingIntervalGroup.cpp"
		"StatoscopeTextureStreamingIntervalGroup.cpp"
		"StatoscopeStreamingIntervalGroup.h"
		"StatoscopeTextureStreamingIntervalGroup.h"
		"Statoscope.h"
	SOURCE_GROUP "ZLibCompressor"
		"ZLibCompressor.cpp"
		"ZLibCompressor.h"
)

add_sources("CrySystem_uber_8.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "HuffmanEncoding"
		"Huffman.cpp"
		"Huffman.h"
	SOURCE_GROUP "JobManager"
		"JobManager/JobManager.cpp"
		"JobManager/JobManager.h"
		"JobManager/JobStructs.h"
	SOURCE_GROUP "JobManager\\\\BlockingBackend"
		"JobManager/BlockingBackend/BlockingBackEnd.cpp"
		"JobManager/BlockingBackend/BlockingBackEnd.h"
	SOURCE_GROUP "JobManager\\\\FallbackBackend"
		"JobManager/FallbackBackend/FallbackBackend.cpp"
		"JobManager/FallbackBackend/FallBackBackend.h"
	SOURCE_GROUP "JobManager\\\\ThreadBackEnd"
		"JobManager/PCBackEnd/ThreadBackEnd.cpp"
		"JobManager/PCBackEnd/ThreadBackEnd.h"
	SOURCE_GROUP "OverloadSceneManager"
		"OverloadSceneManager/OverloadSceneManager.cpp"
		"OverloadSceneManager/OverloadSceneManager.h"
)

add_sources("CrySystem_uber_9.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "LZ4Decompressor"
		"LZ4Decompressor.h"
		"LZ4Decompressor.cpp"
	SOURCE_GROUP "ProjectManager"
		"ProjectManager/ProjectManager.h"
		"ProjectManager/ProjectManager.cpp"
	SOURCE_GROUP "RemoteConsole"
		"RemoteConsole/RemoteConsole.cpp"
		"RemoteConsole/RemoteConsole.h"
	SOURCE_GROUP "Serialization"
		"Serialization/ArchiveHost.cpp"
		"Serialization/Test_ArchiveHost.cpp"
		"Serialization/Token.h"
		"Serialization/XmlIArchive.cpp"
		"Serialization/XmlIArchive.h"
		"Serialization/XmlOArchive.cpp"
		"Serialization/XmlOArchive.h"
	SOURCE_GROUP "Services"
		"ServiceNetwork.cpp"
		"ServiceNetwork.h"
		"RemoteCommand.cpp"
		"RemoteCommand.h"
		"RemoteCommandHelpers.cpp"
		"RemoteCommandHelpers.h"
		"RemoteCommandServer.cpp"
		"RemoteCommandClient.cpp"
	SOURCE_GROUP "Stroboscope"
		"Stroboscope/Stroboscope.cpp"
		"Stroboscope/Stroboscope.h"
	SOURCE_GROUP "VR"
		"HMDManager.h"
		"HMDManager.cpp"
		"HMDCVars.h"
		"HMDCVars.cpp"
	SOURCE_GROUP "ZLibDecompressor"
		"ZLibDecompressor.h"
		"ZLibDecompressor.cpp"
)

add_sources("NoUberFile"
	PROJECTS CrySystem
	SOURCE_GROUP "Mac"
		"SystemUtilsApple.h"
		"SystemUtilsApple.mm"
	SOURCE_GROUP "Root"
		"CrashHandler.rc"
		"StdAfx.cpp"
		"StdAfx.h"
	SOURCE_GROUP "Source Files"
		"CryDLMalloc.c"
)

# -- crysystem_durango.waf_files --
sources_platform(DURANGO)
add_sources("CrySystem_uber_1.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "Header Files"
		"DurangoDebugCallstack.h"
	SOURCE_GROUP "Source Files"
		"DurangoDebugCallstack.cpp"
)

add_sources("CrySystem_uber_7.cpp"
	PROJECTS CrySystem
	SOURCE_GROUP "PlatformOS"
		"PlatformOS/StreamingInstall_Durango.h"
		"PlatformOS/StreamingInstall_Durango.cpp"
		"PlatformOS/SaveReaderWriter_Durango.h"
		"PlatformOS/SaveReaderWriter_Durango.cpp"
		"PlatformOS/PlatformOS_Durango.cpp"
		"PlatformOS/PlatformOS_Durango.h"
)

# -- platformos.waf_files --
sources_platform(ANDROID APPLE LINUX WIN32)
add_sources("NoUberFile"
	PROJECTS CrySystem
	SOURCE_GROUP "PlatformOS"
		"PlatformOS/PlatformOS_PC.cpp"
		"PlatformOS/PlatformOS_PC.h"
		"PlatformOS/SaveReaderWriter_Steam.h"
		"PlatformOS/SaveReaderWriter_Steam.cpp"
)

end_sources()
>>>>>>> upstream/stabilisation
#END-FILE-LIST

CryEngineModule(CrySystem PCH "StdAfx.cpp" SOLUTION_FOLDER "CryEngine")

<<<<<<< HEAD
include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )
include_directories( ${SDK_DIR}/libtomcrypt/src/headers )
include_directories( ${SDK_DIR}/Scaleform/Include )
include_directories( ${SDK_DIR}/pdcurses )
include_directories( ${SDK_DIR}/Steamworks/public )
include_directories( ${SDK_DIR}/zlib-1.2.8 )
include_directories( ${SDK_DIR}/expat-2.1.0/lib )
include_directories( ${SDK_DIR}/lz4/lib )
include_directories( ${SDK_DIR}/OculusSDK/LibOVR/Include )
include_directories( ${SDK_DIR}/OSVR/include )

if(ORBIS)
	# Exlude files from Build
	set_source_files_properties(
		PlatformOS/PlatformOS_PC.cpp
			PROPERTIES HEADER_FILE_ONLY TRUE
	)
endif(ORBIS)

if (NOT MACOS)
	set_source_files_properties( ${SourceGroup_Mac} PROPERTIES HEADER_FILE_ONLY TRUE )
endif()

if(WIN64)
	link_directories( ${SDK_DIR}/pdcurses/amd64 )
	link_directories( ${SDK_DIR}/OpenVR/lib/win64 )
	link_directories( ${SDK_DIR}/OSVR/lib )
elseif(WIN32)
	link_directories( ${SDK_DIR}/pdcurses/x86 )
	link_directories( ${SDK_DIR}/OpenVR/lib/win32 )
endif()

if (DURANGO)
	add_definitions(-DEXCLUDE_CINEMIZER_SDK)
endif()

link_directories( ${SDK_DIR}/Scaleform/Lib/${MSVC_LIB_PREFIX}/${BUILD_PLATFORM} )

if (MSVC_VERSION EQUAL 1900) # Visual Studio 2015
	# Missing CRI video libs for Visual Studio 2015
	add_definitions(-DEXCLUDE_SCALEFORM_VIDEO)
	set(EXCLUDE_SCALEFORM_VIDEO TRUE)
else()
	link_directories( ${SDK_DIR}/Scaleform/Lib/${BUILD_PLATFORM} )
endif()

link_directories( ${CMAKE_CURRENT_SOURCE_DIR} )

add_definitions( -DCRY_NO_PRAGMA_LIB )
add_definitions( -DLTM_DESC ) # Forces to use libtommath together with libtomcrypt

add_library( ${THIS_PROJECT} ${SOURCES})
target_link_libraries( ${THIS_PROJECT} zlib )
target_link_libraries( ${THIS_PROJECT} expat )
target_link_libraries( ${THIS_PROJECT} lz4 )
target_link_libraries( ${THIS_PROJECT} md5 )

if (WIN32 OR DURANGO)
	target_link_libraries( ${THIS_PROJECT} imm32 oleaut32 )
	#Scaleform Libs
	target_link_libraries( ${THIS_PROJECT} debug Debug/libgfx )
	target_link_libraries( ${THIS_PROJECT} debug Debug/libgfx_ime )
	target_link_libraries( ${THIS_PROJECT} debug Debug/libjpeg )

	target_link_libraries( ${THIS_PROJECT} optimized Release/libgfx )
	target_link_libraries( ${THIS_PROJECT} optimized Release/libgfx_ime )
	target_link_libraries( ${THIS_PROJECT} optimized Release/libjpeg )

	if (NOT EXCLUDE_SCALEFORM_VIDEO)
		target_link_libraries( ${THIS_PROJECT} debug Debug/libgfx_video )
		target_link_libraries( ${THIS_PROJECT} optimized Release/libgfx_video )
	endif()
endif()

=======
target_link_libraries( ${THIS_PROJECT} PRIVATE zlib expat lz4 md5 tomcrypt )
use_scaleform()
>>>>>>> upstream/stabilisation
if (WIN32)
	set_target_properties(${THIS_PROJECT} PROPERTIES LINK_FLAGS "/NODEFAULTLIB:libcmt.lib /NODEFAULTLIB:libcpmt.lib")
	target_link_libraries(${THIS_PROJECT} PRIVATE wininet Shell32 Ole32 Gdi32)
elseif(LINUX)
	target_link_libraries( ${THIS_PROJECT} PRIVATE ncursesw m )
elseif(APPLE)
	target_link_libraries( ${THIS_PROJECT} PRIVATE ncurses m )
elseif(ORBIS)
	target_link_libraries( ${THIS_PROJECT} PRIVATE SceMsgDialog_stub_weak SceImeDialog_stub_weak )
	target_link_libraries( ${THIS_PROJECT} PRIVATE $<$<NOT:$<CONFIG:Release>>:SceDbg_stub_weak> )
elseif(DURANGO)
	set_property(TARGET ${THIS_PROJECT} APPEND PROPERTY COMPILE_FLAGS "\"/AI${DURANGO_PLATFORM_SDK}/ExtensionSDKs/Xbox Services API/8.0/References/CommonConfiguration/neutral\"")	
	target_link_libraries( ${THIS_PROJECT} PRIVATE uuid acphal )
elseif(ANDROID)
	target_include_directories( ${THIS_PROJECT} PRIVATE "${SDK_DIR}/SDL2/include/linux" "${SDK_DIR}/SDL2/include/SDL" )
endif()

if (OPTION_ENABLE_CRASHRPT)
	add_subdirectory( "${CRY_LIBS_DIR}/crashrpt" "${CMAKE_CURRENT_BINARY_DIR}/crashrpt")
	target_compile_definitions(${THIS_PROJECT} PRIVATE CRY_USE_CRASHRPT=1)
	target_link_libraries( ${THIS_PROJECT} PRIVATE crashrpt )
endif()

if (ANDROID)
	#Force comping "CryDLMalloc.c" as C++
	set_source_files_properties("CryDLMalloc.c" PROPERTIES LANGUAGE CXX)
endif()
